"use strict";(self.webpackChunkfaceit=self.webpackChunkfaceit||[]).push([[190],{190:(m,u,i)=>{i.r(u),i.d(u,{vega_checkbox_group:()=>d});var o=i(5861),t=i(5934),_=i(7352),g=i(3068),f=i(9254),E=i(8769),P=i(8768),v=(i(7983),i(2723),function(e,a,l,r){var n,h=arguments.length,s=h<3?a:null===r?r=Object.getOwnPropertyDescriptor(a,l):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,a,l,r);else for(var c=e.length-1;c>=0;c--)(n=e[c])&&(s=(h<3?n(s):h>3?n(a,l,s):n(a,l))||s);return h>3&&s&&Object.defineProperty(a,l,s),s});const d=class{constructor(e){(0,t.r)(this,e),this.vegaChange=(0,t.c)(this,"vegaChange",7),this.vegaValidate=(0,t.c)(this,"vegaValidate",7),this.label="",this.value=[],this.vegaFlexProp={},this.disabled=!1,this.required=!1,this.hint="",this.formValidation=0,this.isValid=null}watchValue(){var e=this;return(0,o.Z)(function*(){e.initCheckboxArray(),e.vegaChange.emit(e.value)})()}watchVegaFlexProp(){this.setVegaFlexProperty()}watchDisabled(){var e=this;return(0,o.Z)(function*(){e.initCheckboxArray()})()}watchFormValidation(){this.validator&&this.valid()}watchIsValid(e){this.vegaValidate.emit(e)}componentDidLoad(){this.setVegaFlexProperty(),this.initCheckboxArray()}valid(e=!0){var a=this;return(0,o.Z)(function*(){return a.validator.validate(e)})()}render(){return(0,g.s)((0,t.h)(t.H,null,this.renderLabelDom(),(0,t.h)("div",{class:"vega-checkbox-group-container"},(0,t.h)("vega-flex",{ref:e=>{this.vegaFlexElement=e,this.vegaFlexElement.addEventListener("vegaChange",this.onChildVegaCheckboxChange.bind(this))}},(0,t.h)("slot",null))),(0,t.h)("div",{class:"vega-error vega-hidden"}),this.renderHintDom()),this.host)}renderLabelDom(){return this.label&&(0,t.h)("div",{class:"vega-label"},(0,t.h)("label",{"aria-label":this.label},this.label,this.renderRequireDom()))}renderRequireDom(){return this.required?(0,t.h)("span",{class:"vega-require"},"*"):null}renderHintDom(){return this.hint&&(0,t.h)("div",{class:"vega-hint"},(0,t.h)("label",null,this.hint))}setVegaFlexProperty(){this.vegaFlexProp&&Object.assign(this.vegaFlexElement,{gap:"size-8",direction:"row",breakpoint:"None",useNativeFlex:!0},this.vegaFlexProp)}onChildVegaCheckboxChange(e){e.target!==this.host&&(this.syncCheckboxItemsValue(e.detail,e.target.identifier),e.stopPropagation())}syncCheckboxItemsValue(e,a){e&&!this.value.includes(a)?this.value=[...this.value,a]:!e&&this.value.includes(a)&&(this.value=[...(0,f.d)(this.value,[a])])}initCheckboxArray(){this.vegaCheckboxArray=Array.from(this.host.querySelectorAll("vega-checkbox")),this.vegaCheckboxArray.forEach(e=>{e.checked=!!(this.value&&this.value.length>0)&&this.value.includes(e.identifier),e.disabled=this.disabled})}get host(){return(0,t.g)(this)}static get watchers(){return{value:["watchValue"],vegaFlexProp:["watchVegaFlexProp"],disabled:["watchDisabled"],formValidation:["watchFormValidation"],isValid:["watchIsValid"]}}};v([(0,P.I)({entries:[{propertyName:"required",ruleFactory:e=>e?new _.R:null}]},null,".vega-checkbox-group-container","input")],d.prototype,"validator",void 0),v([(0,E.C)()],d.prototype,"watchVegaFlexProp",null)}}]);